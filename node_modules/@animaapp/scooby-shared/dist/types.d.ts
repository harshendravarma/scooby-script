export declare type LocalResource = {
    type: "local";
    path: string;
};
export declare type HostedResource = {
    type: "hosted";
    url: string;
};
export declare type Resource = LocalResource | HostedResource;
export declare type BaseReport = {
    name: string;
    createdAt: number;
    commitHash: string;
    summary: Summary;
    items?: ReportItem[];
};
export declare type BaseReportEntry<TResource extends Resource> = {
    id: string;
    groupId: string;
    tags: string[];
    path: string;
    metadata?: Metadata<TResource>[];
};
export declare type ReportImageTestEntry<TResource extends Resource> = BaseReportEntry<TResource> & {
    type: "image";
    image: TResource;
};
export declare type ReportCodeTestEntry<TResource extends Resource> = BaseReportEntry<TResource> & {
    type: "code";
    code: TResource;
};
export declare type ReportImageComparison<TResource extends Resource> = {
    type: "image";
    similarity: number;
    normalizedExpected: TResource;
    normalizedActual: TResource;
    diff: TResource;
    overlap: TResource;
};
export declare type ReportCodeComparison<TResource extends Resource> = {
    type: "code";
    similarity: number;
    diff?: TResource;
};
export declare type BaseMetadata = {
    name: string;
    description?: string;
};
export declare type TextMetadata = BaseMetadata & {
    type: "text";
    text: string;
};
export declare type LinkMetadata = BaseMetadata & {
    type: "link";
    url: string;
};
export declare type ImageMetadata<TResource extends Resource> = BaseMetadata & {
    type: "image";
    image: TResource;
};
export declare type CodeMetadata<TResource extends Resource> = BaseMetadata & {
    type: "code";
    code: TResource;
};
export declare type FileMetadata<TResource extends Resource> = BaseMetadata & {
    type: "file";
    file: TResource;
};
export declare type Metadata<TResource extends Resource> = TextMetadata | LinkMetadata | ImageMetadata<TResource> | CodeMetadata<TResource> | FileMetadata<TResource>;
export declare type BaseRegressionReport<TResource extends Resource> = BaseReport & {
    type: "regression";
    baseCommitHash: string;
    results: RegressionReportResults<TResource>;
};
export declare type BaseRegressionReportResults<TResource extends Resource, TEntry extends RegressionTestEntry<TResource>, TPair extends RegressionTestPair<TResource>> = {
    new: TEntry[];
    removed: TEntry[];
    unchanged: TPair[];
    changed: TPair[];
};
export declare type ImageRegressionReportResults<TResource extends Resource> = BaseRegressionReportResults<TResource, ImageRegressionTestEntry<TResource>, ImageRegressionTestPair<TResource>> & {
    type: "image";
};
export declare type CodeRegressionReportResults<TResource extends Resource> = BaseRegressionReportResults<TResource, CodeRegressionTestEntry<TResource>, CodeRegressionTestPair<TResource>> & {
    type: "code";
};
export declare type RegressionReportResults<TResource extends Resource> = ImageRegressionReportResults<TResource> | CodeRegressionReportResults<TResource>;
export declare type BaseRegressionTestPair<TResource extends Resource, TEntry extends RegressionTestEntry<TResource>, TComparison> = {
    expected: TEntry;
    actual: TEntry;
    comparison: TComparison;
};
export declare type ImageRegressionTestPair<TResource extends Resource> = BaseRegressionTestPair<TResource, ImageRegressionTestEntry<TResource>, ReportImageComparison<TResource>> & {
    type: "image";
};
export declare type CodeRegressionTestPair<TResource extends Resource> = BaseRegressionTestPair<TResource, CodeRegressionTestEntry<TResource>, ReportCodeComparison<TResource>> & {
    type: "code";
};
export declare type RegressionTestPair<TResource extends Resource> = ImageRegressionTestPair<TResource> | CodeRegressionTestPair<TResource>;
export declare type ImageRegressionTestEntry<TResource extends Resource> = ReportImageTestEntry<TResource>;
export declare type CodeRegressionTestEntry<TResource extends Resource> = ReportCodeTestEntry<TResource>;
export declare type RegressionTestEntry<TResource extends Resource> = ImageRegressionTestEntry<TResource> | CodeRegressionTestEntry<TResource>;
export declare type LocalRegressionTestPair = RegressionTestPair<LocalResource>;
export declare type HostedRegressionTestPair = RegressionTestPair<HostedResource>;
export declare type LocalRegressionTestEntry = RegressionTestEntry<LocalResource>;
export declare type HostedRegressionTestEntry = RegressionTestEntry<HostedResource>;
export declare type LocalRegressionReport = BaseRegressionReport<LocalResource>;
export declare type HostedRegressionReport = BaseRegressionReport<HostedResource>;
export declare type RegressionReport = LocalRegressionReport | HostedRegressionReport;
export declare type BaseFidelityReport<TResource extends Resource> = BaseReport & {
    type: "fidelity";
    overallFidelityScore: number;
    pairs: FidelityTestPair<TResource>[];
};
export declare type BaseFidelityTestPair<TResource extends Resource, TEntry extends FidelityTestEntry<TResource>, TComparison> = {
    outcome: "success" | "failure";
    expected: TEntry;
    actual: TEntry;
    comparison: TComparison;
};
export declare type ImageFidelityTestPair<TResource extends Resource> = BaseFidelityTestPair<TResource, ImageFidelityTestEntry<TResource>, ReportImageComparison<TResource>> & {
    type: "image";
};
export declare type CodeFidelityTestPair<TResource extends Resource> = BaseFidelityTestPair<TResource, CodeFidelityTestEntry<TResource>, ReportCodeComparison<TResource>> & {
    type: "code";
};
export declare type FidelityTestPair<TResource extends Resource> = ImageFidelityTestPair<TResource> | CodeFidelityTestPair<TResource>;
export declare type ImageFidelityTestEntry<TResource extends Resource> = ReportImageTestEntry<TResource>;
export declare type CodeFidelityTestEntry<TResource extends Resource> = ReportCodeTestEntry<TResource>;
export declare type FidelityTestEntry<TResource extends Resource> = ImageFidelityTestEntry<TResource> | CodeFidelityTestEntry<TResource>;
export declare type LocalFidelityTestPair = FidelityTestPair<LocalResource>;
export declare type HostedFidelityTestPair = FidelityTestPair<HostedResource>;
export declare type LocalFidelityTestEntry = FidelityTestEntry<LocalResource>;
export declare type HostedFidelityTestEntry = FidelityTestEntry<HostedResource>;
export declare type LocalFidelityReport = BaseFidelityReport<LocalResource>;
export declare type HostedFidelityReport = BaseFidelityReport<HostedResource>;
export declare type FidelityReport = LocalFidelityReport | HostedFidelityReport;
export declare type BaseFidelityRegressionReport<TResource extends Resource> = BaseReport & {
    type: "fidelity-regression";
    baseCommitHash: string;
    overallFidelityScore: number;
    results: FidelityRegressionReportResults<TResource>;
};
export declare type BaseFidelityRegressionReportResults<TResource extends Resource, TEntry extends FidelityRegressionTestEntry<TResource>, TPair extends FidelityRegressionTestPair<TResource>, TTriple extends FidelityRegressionTestTriple<TResource>> = {
    new: TPair[];
    removed: TEntry[];
    unchanged: TTriple[];
    changed: TTriple[];
};
export declare type ImageFidelityRegressionReportResults<TResource extends Resource> = BaseFidelityRegressionReportResults<TResource, ImageFidelityRegressionTestEntry<TResource>, ImageFidelityRegressionTestPair<TResource>, ImageFidelityRegressionTestTriple<TResource>> & {
    type: "image";
};
export declare type CodeFidelityRegressionReportResults<TResource extends Resource> = BaseFidelityRegressionReportResults<TResource, CodeFidelityRegressionTestEntry<TResource>, CodeFidelityRegressionTestPair<TResource>, CodeFidelityRegressionTestTriple<TResource>> & {
    type: "code";
};
export declare type FidelityRegressionReportResults<TResource extends Resource> = ImageFidelityRegressionReportResults<TResource> | CodeFidelityRegressionReportResults<TResource>;
export declare type BaseFidelityRegressionTestPair<TResource extends Resource, TEntry extends FidelityRegressionTestEntry<TResource>, TComparison> = {
    expected: TEntry;
    actual: TEntry;
    fidelityComparison: TComparison;
};
export declare type BaseFidelityRegressionTestTriple<TResource extends Resource, TEntry extends FidelityRegressionTestEntry<TResource>, TComparison> = {
    expected: TEntry;
    actual: TEntry;
    fidelityComparison: TComparison;
    reference: TEntry;
    regressionComparison: TComparison;
};
export declare type ImageFidelityRegressionTestPair<TResource extends Resource> = BaseFidelityRegressionTestPair<TResource, ImageFidelityRegressionTestEntry<TResource>, ReportImageComparison<TResource>> & {
    type: "image";
};
export declare type CodeFidelityRegressionTestPair<TResource extends Resource> = BaseFidelityRegressionTestPair<TResource, CodeFidelityRegressionTestEntry<TResource>, ReportCodeComparison<TResource>> & {
    type: "code";
};
export declare type FidelityRegressionTestPair<TResource extends Resource> = ImageFidelityRegressionTestPair<TResource> | CodeFidelityRegressionTestPair<TResource>;
export declare type ImageFidelityRegressionTestTriple<TResource extends Resource> = BaseFidelityRegressionTestTriple<TResource, ImageFidelityRegressionTestEntry<TResource>, ReportImageComparison<TResource>> & {
    type: "image";
};
export declare type CodeFidelityRegressionTestTriple<TResource extends Resource> = BaseFidelityRegressionTestTriple<TResource, CodeFidelityRegressionTestEntry<TResource>, ReportCodeComparison<TResource>> & {
    type: "code";
};
export declare type FidelityRegressionTestTriple<TResource extends Resource> = ImageFidelityRegressionTestTriple<TResource> | CodeFidelityRegressionTestTriple<TResource>;
export declare type ImageFidelityRegressionTestEntry<TResource extends Resource> = ReportImageTestEntry<TResource>;
export declare type CodeFidelityRegressionTestEntry<TResource extends Resource> = ReportCodeTestEntry<TResource>;
export declare type FidelityRegressionTestEntry<TResource extends Resource> = ImageFidelityRegressionTestEntry<TResource> | CodeFidelityRegressionTestEntry<TResource>;
export declare type LocalFidelityRegressionTestPair = FidelityRegressionTestPair<LocalResource>;
export declare type HostedFidelityRegressionTestPair = FidelityRegressionTestPair<HostedResource>;
export declare type LocalFidelityRegressionTestEntry = FidelityRegressionTestEntry<LocalResource>;
export declare type HostedFidelityRegressionTestEntry = FidelityRegressionTestEntry<HostedResource>;
export declare type LocalFidelityRegressionReport = BaseFidelityRegressionReport<LocalResource>;
export declare type HostedFidelityRegressionReport = BaseFidelityRegressionReport<HostedResource>;
export declare type FidelityRegressionReport = LocalFidelityRegressionReport | HostedFidelityRegressionReport;
export declare type Report = RegressionReport | FidelityReport | FidelityRegressionReport;
export declare type LocalReport = LocalRegressionReport | LocalFidelityReport | LocalFidelityRegressionReport;
export declare type HostedReport = HostedRegressionReport | HostedFidelityReport | HostedFidelityRegressionReport;
export declare type Summary = {
    result: "success" | "failure";
    stats: SummaryStatistic[];
};
export declare type BaseStatistic = {
    name: string;
    description?: string;
    sentiment: Sentiment;
};
export declare type GaugeStatistic = BaseStatistic & {
    type: "gauge";
    value: number;
};
export declare type FractionStatistic = BaseStatistic & {
    type: "fraction";
    numerator: number;
    denominator: number;
};
export declare type SummaryStatistic = GaugeStatistic | FractionStatistic;
export declare type Sentiment = "success" | "danger" | "warning" | "info";
export declare type ReportItem = {
    id: string;
    hash: string;
    status: ReportItemStatus;
};
export declare type ReportItemStatus = "success" | "failure";
export declare type Review = {
    approvals: ReviewApproval[];
    rejections: ReviewRejection[];
};
export declare type ReviewApproval = {
    report: string;
    id: string;
    hash: string;
    createdAt: number;
    commitHash: string;
};
export declare type ReviewRejection = {
    report: string;
    id: string;
    hash: string;
    createdAt: number;
    commitHash: string;
};
export declare type CommitStatusOverview = {
    createdAt: number;
    reports: Record<string, CommitReportStatusOverview>;
};
export declare type CommitReportStatusOverview = {
    status: CommitReportStatus;
    message: string;
};
export declare type CommitReportStatus = "success" | "failure" | "approved" | "changes_requested";
export declare type GlobalEnvironmentSetup = {
    s3?: {
        bucket: string;
        region: string;
    };
    restApi?: {
        baseUrl: string;
        accessToken: string;
    };
    zipArchive?: {
        buffer: ArrayBuffer;
    };
};
