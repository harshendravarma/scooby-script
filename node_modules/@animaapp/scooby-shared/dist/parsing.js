"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.parseGlobalEnvironmentSetup = exports.parseCommitStatusOverview = exports.parseReview = exports.parseHostedReport = void 0;
const zod_1 = require("zod");
const baseStatisticSchema = zod_1.z.object({
    name: zod_1.z.string(),
    description: zod_1.z.optional(zod_1.z.string()),
    sentiment: zod_1.z.enum(["success", "danger", "warning", "info"]),
});
const fractionStatisticSchema = baseStatisticSchema.extend({
    type: zod_1.z.literal("fraction"),
    numerator: zod_1.z.number(),
    denominator: zod_1.z.number(),
});
const gaugeStatisticSchema = baseStatisticSchema.extend({
    type: zod_1.z.literal("gauge"),
    value: zod_1.z.number(),
});
const statisticSchema = zod_1.z.discriminatedUnion("type", [
    fractionStatisticSchema,
    gaugeStatisticSchema,
]);
const summarySchema = zod_1.z.object({
    result: zod_1.z.enum(["success", "failure"]),
    stats: zod_1.z.array(statisticSchema),
});
const reportItem = zod_1.z.object({
    id: zod_1.z.string(),
    hash: zod_1.z.string(),
    status: zod_1.z.enum(["success", "failure"]),
});
const baseReportSchema = zod_1.z.object({
    name: zod_1.z.string(),
    createdAt: zod_1.z.number(),
    commitHash: zod_1.z.string(),
    type: zod_1.z.string(),
    summary: summarySchema,
    items: zod_1.z.array(reportItem),
});
const hostedResource = zod_1.z.object({
    type: zod_1.z.literal("hosted"),
    url: zod_1.z.string().url(),
});
const baseMetadataSchema = zod_1.z.object({
    name: zod_1.z.string(),
    description: zod_1.z.optional(zod_1.z.string()),
});
const textMetadataSchema = baseMetadataSchema.extend({
    type: zod_1.z.literal("text"),
    text: zod_1.z.string(),
});
const linkMetadataSchema = baseMetadataSchema.extend({
    type: zod_1.z.literal("link"),
    url: zod_1.z.string(),
});
const imageMetadataSchema = baseMetadataSchema.extend({
    type: zod_1.z.literal("image"),
    image: hostedResource,
});
const codeMetadataSchema = baseMetadataSchema.extend({
    type: zod_1.z.literal("code"),
    code: hostedResource,
});
const fileMetadataSchema = baseMetadataSchema.extend({
    type: zod_1.z.literal("file"),
    file: hostedResource,
});
const metadataSchema = zod_1.z.discriminatedUnion("type", [
    textMetadataSchema,
    linkMetadataSchema,
    imageMetadataSchema,
    codeMetadataSchema,
    fileMetadataSchema,
]);
const baseReportEntrySchema = zod_1.z.object({
    id: zod_1.z.string(),
    groupId: zod_1.z.string(),
    tags: zod_1.z.array(zod_1.z.string()),
    path: zod_1.z.string().default("path"),
    metadata: zod_1.z.optional(zod_1.z.array(metadataSchema)),
});
const reportImageEntrySchema = baseReportEntrySchema.extend({
    type: zod_1.z.literal("image").default("image"),
    image: hostedResource,
});
const reportCodeEntrySchema = baseReportEntrySchema.extend({
    type: zod_1.z.literal("code"),
    code: hostedResource,
});
const reportImageComparisonSchema = zod_1.z.object({
    type: zod_1.z.literal("image").default("image"),
    similarity: zod_1.z.number(),
    normalizedExpected: hostedResource,
    normalizedActual: hostedResource,
    diff: hostedResource,
    overlap: hostedResource,
});
const reportCodeComparisonSchema = zod_1.z.object({
    type: zod_1.z.literal("code"),
    similarity: zod_1.z.number(),
    diff: zod_1.z.optional(hostedResource),
});
const imageRegressionEntrySchema = reportImageEntrySchema;
const codeRegressionEntrySchema = reportCodeEntrySchema;
const imageRegressionTestPairSchema = zod_1.z.object({
    type: zod_1.z.literal("image").default("image"),
    expected: imageRegressionEntrySchema,
    actual: imageRegressionEntrySchema,
    comparison: reportImageComparisonSchema,
});
const codeRegressionTestPairSchema = zod_1.z.object({
    type: zod_1.z.literal("code"),
    expected: codeRegressionEntrySchema,
    actual: codeRegressionEntrySchema,
    comparison: reportCodeComparisonSchema,
});
const regressionReportSchema = baseReportSchema.extend({
    type: zod_1.z.literal("regression"),
    baseCommitHash: zod_1.z.string(),
    results: zod_1.z.union([
        zod_1.z.object({
            type: zod_1.z.literal("image").default("image"),
            new: zod_1.z.array(imageRegressionEntrySchema),
            removed: zod_1.z.array(imageRegressionEntrySchema),
            changed: zod_1.z.array(imageRegressionTestPairSchema),
            unchanged: zod_1.z.array(imageRegressionTestPairSchema),
        }),
        zod_1.z.object({
            type: zod_1.z.literal("code"),
            new: zod_1.z.array(codeRegressionEntrySchema),
            removed: zod_1.z.array(codeRegressionEntrySchema),
            changed: zod_1.z.array(codeRegressionTestPairSchema),
            unchanged: zod_1.z.array(codeRegressionTestPairSchema),
        }),
    ]),
});
const imageFidelityEntrySchema = reportImageEntrySchema;
const codeFidelityEntrySchema = reportCodeEntrySchema;
const imageFidelityTestPairSchema = zod_1.z.object({
    type: zod_1.z.literal("image").default("image"),
    outcome: zod_1.z.enum(["success", "failure"]).default("success"),
    expected: imageFidelityEntrySchema,
    actual: imageFidelityEntrySchema,
    comparison: reportImageComparisonSchema,
});
const codeFidelityTestPairSchema = zod_1.z.object({
    type: zod_1.z.literal("code"),
    outcome: zod_1.z.enum(["success", "failure"]).default("success"),
    expected: codeFidelityEntrySchema,
    actual: codeFidelityEntrySchema,
    comparison: reportCodeComparisonSchema,
});
const fidelityReportSchema = baseReportSchema.extend({
    type: zod_1.z.literal("fidelity"),
    overallFidelityScore: zod_1.z.number(),
    pairs: zod_1.z.array(zod_1.z.union([codeFidelityTestPairSchema, imageFidelityTestPairSchema])),
});
const imageFidelityRegressionEntrySchema = reportImageEntrySchema;
const codeFidelityRegressionEntrySchema = reportCodeEntrySchema;
const imageFidelityRegressionTestPairSchema = zod_1.z.object({
    type: zod_1.z.literal("image"),
    expected: imageFidelityRegressionEntrySchema,
    actual: imageFidelityRegressionEntrySchema,
    fidelityComparison: reportImageComparisonSchema,
});
const codeFidelityRegressionTestPairSchema = zod_1.z.object({
    type: zod_1.z.literal("code"),
    expected: codeFidelityRegressionEntrySchema,
    actual: codeFidelityRegressionEntrySchema,
    fidelityComparison: reportCodeComparisonSchema,
});
const imageFidelityRegressionTestTripleSchema = zod_1.z.object({
    type: zod_1.z.literal("image"),
    expected: imageFidelityRegressionEntrySchema,
    actual: imageFidelityRegressionEntrySchema,
    reference: imageFidelityRegressionEntrySchema,
    fidelityComparison: reportImageComparisonSchema,
    regressionComparison: reportImageComparisonSchema,
});
const codeFidelityRegressionTestTripleSchema = zod_1.z.object({
    type: zod_1.z.literal("code"),
    expected: codeFidelityRegressionEntrySchema,
    actual: codeFidelityRegressionEntrySchema,
    reference: codeFidelityRegressionEntrySchema,
    fidelityComparison: reportCodeComparisonSchema,
    regressionComparison: reportCodeComparisonSchema,
});
const fidelityRegressionReportSchema = baseReportSchema.extend({
    type: zod_1.z.literal("fidelity-regression"),
    baseCommitHash: zod_1.z.string(),
    overallFidelityScore: zod_1.z.number(),
    results: zod_1.z.discriminatedUnion("type", [
        zod_1.z.object({
            type: zod_1.z.literal("image"),
            new: zod_1.z.array(imageFidelityRegressionTestPairSchema),
            removed: zod_1.z.array(imageFidelityRegressionEntrySchema),
            changed: zod_1.z.array(imageFidelityRegressionTestTripleSchema),
            unchanged: zod_1.z.array(imageFidelityRegressionTestTripleSchema),
        }),
        zod_1.z.object({
            type: zod_1.z.literal("code"),
            new: zod_1.z.array(codeFidelityRegressionTestPairSchema),
            removed: zod_1.z.array(codeFidelityRegressionEntrySchema),
            changed: zod_1.z.array(codeFidelityRegressionTestTripleSchema),
            unchanged: zod_1.z.array(codeFidelityRegressionTestTripleSchema),
        }),
    ]),
});
const reportSchema = zod_1.z.discriminatedUnion("type", [
    regressionReportSchema,
    fidelityReportSchema,
    fidelityRegressionReportSchema,
]);
function parseHostedReport(report) {
    return reportSchema.parse(report);
}
exports.parseHostedReport = parseHostedReport;
const reviewSchema = zod_1.z.object({
    approvals: zod_1.z.array(zod_1.z.object({
        report: zod_1.z.string(),
        id: zod_1.z.string(),
        hash: zod_1.z.string(),
        commitHash: zod_1.z.string(),
        createdAt: zod_1.z.number(),
    })),
    rejections: zod_1.z.array(zod_1.z.object({
        report: zod_1.z.string(),
        id: zod_1.z.string(),
        hash: zod_1.z.string(),
        commitHash: zod_1.z.string(),
        createdAt: zod_1.z.number(),
    })),
});
function parseReview(review) {
    return reviewSchema.parse(review);
}
exports.parseReview = parseReview;
const commitStatusOverviewSchema = zod_1.z.object({
    createdAt: zod_1.z.number(),
    reports: zod_1.z.record(zod_1.z.object({
        status: zod_1.z.enum(["success", "failure", "approved", "changes_requested"]),
        message: zod_1.z.string(),
    })),
});
function parseCommitStatusOverview(overview) {
    return commitStatusOverviewSchema.parse(overview);
}
exports.parseCommitStatusOverview = parseCommitStatusOverview;
const globalEnviornmentSetupSchema = zod_1.z.object({
    s3: zod_1.z.optional(zod_1.z.object({
        bucket: zod_1.z.string(),
        region: zod_1.z.string(),
    })),
    restApi: zod_1.z.optional(zod_1.z.object({
        baseUrl: zod_1.z.string(),
        accessToken: zod_1.z.string(),
    })),
});
function parseGlobalEnvironmentSetup(setup) {
    return globalEnviornmentSetupSchema.parse(setup);
}
exports.parseGlobalEnvironmentSetup = parseGlobalEnvironmentSetup;
