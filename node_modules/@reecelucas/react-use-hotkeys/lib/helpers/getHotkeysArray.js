"use strict";
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = (function (hotkeys) {
    var hkeys = hotkeys.toLowerCase();
    if (hkeys.length === 1) {
        // We're dealing with a single key
        return [hkeys];
    }
    if (hkeys.includes("+")) {
        // We're dealing with a modifier-key combination. The `/\b\+/g` regex
        // matches the first `+` at the end of each word, allowing combinations including `+`,
        // E.g. `Shift++`. We can't use a negative lookbehind because of lack of support.
        return hkeys.replace(/\s+/g, "").split(/\b\+/g);
    }
    /**
     * We're dealing with a key sequence, so split on spaces.
     * If the whitespace character is within quotation marks (" " or ' ')
     * it signifies a space key and not a delimeter.
     */
    return __spreadArray([], (hkeys.match(/[^\s"']+|"([^"]*)"|'([^']*)'/g) || []), true).map(function (key) {
        return key.replace(/("|').*?("|')/, " ");
    });
});
