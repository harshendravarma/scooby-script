import { useEffect, useMemo } from "react";
import arraysAreEqual from "./helpers/arraysAreEqual";
import getActiveModifierKeys from "./helpers/getActiveModifierKeys";
import getHotkeysArray from "./helpers/getHotkeysArray";
import isSameSet from "./helpers/isSameSet";
import mapModifierKeys from "./helpers/mapModifierKeys";
import modifierKeyPressed from "./helpers/modifierKeyPressed";
import tail from "./helpers/tail";
import takeUntilLast from "./helpers/takeUntilLast";
import ignoreKeydownEvent from "./helpers/ignoreKeydownEvent";
import "./vendor/shim-keyboard-event-key";
var KEY_SEQUENCE_TIMEOUT = 1000;
var ESCAPE_HATCH_KEY = "*";
var useHotkeys = function (hotkeys, callback, options) {
    var hotkeysArray = useMemo(function () {
        return Array.isArray(hotkeys)
            ? hotkeys.map(getHotkeysArray)
            : [getHotkeysArray(hotkeys)];
    }, [hotkeys]);
    useEffect(function () {
        var keySequences = {};
        var sequenceTimers = {};
        var _a = options || {}, enabled = _a.enabled, enableOnContentEditable = _a.enableOnContentEditable, ignoredElementWhitelist = _a.ignoredElementWhitelist, eventListenerOptions = _a.eventListenerOptions;
        var clearSequenceTimer = function (index) {
            clearTimeout(sequenceTimers[index]);
        };
        var resetKeySequence = function (index) {
            clearSequenceTimer(index);
            keySequences[index] = [];
        };
        var handleKeySequence = function (event, keys, index) {
            clearSequenceTimer(index);
            keySequences[index] = keySequences[index] || [];
            sequenceTimers[index] = window.setTimeout(function () {
                resetKeySequence(index);
            }, KEY_SEQUENCE_TIMEOUT);
            var keySequence = keySequences[index];
            keySequence.push(event.key.toLowerCase());
            if (arraysAreEqual(keySequence, keys)) {
                resetKeySequence(index);
                callback(event);
            }
        };
        var handleModifierCombo = function (event, keys) {
            var actionKey = tail(keys);
            var modKeys = mapModifierKeys(takeUntilLast(keys));
            var activeModKeys = getActiveModifierKeys(event);
            var allModKeysPressed = isSameSet(modKeys, activeModKeys);
            if (allModKeysPressed && event.key.toLowerCase() === actionKey) {
                callback(event);
            }
        };
        var onKeydown = function (event) {
            if (ignoreKeydownEvent(event, enableOnContentEditable, ignoredElementWhitelist)) {
                return;
            }
            hotkeysArray.forEach(function (keysArray, i) {
                if (keysArray.length === 1 && keysArray[0] === ESCAPE_HATCH_KEY) {
                    /**
                     * Provide escape hatch should the user want to perform
                     * some custom logic not supported by the API.
                     */
                    callback(event);
                    return;
                }
                // Handle modifier key combos
                if (modifierKeyPressed(event)) {
                    handleModifierCombo(event, keysArray);
                    return;
                }
                // Handle key sequences
                if (keysArray.length > 1 && !modifierKeyPressed(event)) {
                    handleKeySequence(event, keysArray, i);
                    return;
                }
                // Handle the basic case; a single hotkey
                if (event.key.toLowerCase() === keysArray[0]) {
                    callback(event);
                }
            });
        };
        if (enabled !== false) {
            window.addEventListener("keydown", onKeydown, eventListenerOptions);
        }
        return function () {
            window.removeEventListener("keydown", onKeydown, eventListenerOptions);
        };
    }, [
        hotkeysArray,
        callback,
        options === null || options === void 0 ? void 0 : options.enabled,
        options === null || options === void 0 ? void 0 : options.enableOnContentEditable,
        options === null || options === void 0 ? void 0 : options.ignoredElementWhitelist,
        options === null || options === void 0 ? void 0 : options.eventListenerOptions,
    ]);
};
export default useHotkeys;
